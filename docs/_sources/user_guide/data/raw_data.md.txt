# Raw Data

## Foursquare

## Foursquare：NYC Restaurant Rich Dataset

## Foursquare：Global-scale Check-in Dataset

## Foursquare：User Profile Dataset

## Foursquare：Global-scale Check-in Dataset with User Social Networks

## Gowalla

## Brightkite

## GeoLife-GPS

出行轨迹，基本就是user_ID，time ，lat，lon，location_id的格式



## NYC-Bus

每条数据包含当前时间，公共汽车位置（经纬度），车辆ID，已行驶距离，公共汽车路线ID，下一站ID，到该站的距离

【本质上是不同时刻的公交车位置数据集】



## NYC-Taxi

按行程ID组织数据（Per Trip），

黄色车：

上下车时间、上下车地点（经纬度）、行程距离、分项票价、费率类型、付款类型和司机报告的乘客数量

绿色车：

取车和还车时间、上下车地点（ID）、行程距离、分项票价、费率类型、付款类型和司机报告的乘客数量

FHV车：

上下车时间、上下车地点（ID）



## NYC-Bike

按行程ID组织数据（Per Trip），

旅程用时、起止时间、起止地点ID、起止地点Name、起止地点经纬度、车辆ID、用户类别、用户生日、用户性别



## BikeDC

按行程ID组织数据（Per Trip），

起止时间、起止地点ID、起止地点Name、起止地点经纬度、车辆类型、车辆ID、用户类别



## BikeCHI

按行程ID组织数据（Per Trip），

起止时间、起止地点ID、起止地点Name、起止地点经纬度、车辆类型、车辆ID、用户类别



## AustinRide

按行程ID组织数据（Per Trip），

旅程距离、起止时间、起止地点经纬度、车辆ID、用户ID等



## I-80

按车辆ID组织数据，每隔一段时间记录一次车的位置，数据的每一行是车辆ID、车辆位置坐标、车辆的相关信息、车辆瞬时速度等



## T-Drive

按车辆ID组织数据，每隔一段时间记录一次车的位置，数据的每一行是车辆ID，时间，车辆位置经纬度



## Porto

按行程ID组织数据（Per Trip），

每个Trip包含开始地点、开始时间、司机ID、一系列位置坐标：每隔一段时间记录一次车的位置（经纬度）



## TaxiBJ

四维张量： [timeslots, inflow/outflow, grid_line_id, grid_column_id]，直接给出了inflow和outflow，只适合于流量预测



## Uber

（不建议使用，没有下车的位置和时间？感觉是从NYC数据集抽取的数据集）

Uber2014：

上车时间、上车地点经纬度

Uber2015：

上车时间、上车地点ID

FLV：

上车时间、上车地点名



## METR-LA

DataFrame二维表的格式

sensor_id            400001  400017  400030  400040  400045  400052  ...  413026  413845  413877  413878  414284  414694
2017-01-01 00:00:00    71.4    67.8    70.5    67.4    68.8    66.6  ...    69.2    68.9    70.4    68.8    71.1    68.0
2017-01-01 00:05:00    71.6    67.5    70.6    67.5    68.7    66.6  ...    70.4    68.8    70.1    68.4    70.8    67.4
2017-01-01 00:10:00    71.6    67.6    70.2    67.4    68.7    66.1  ...    70.2    68.3    69.8    68.4    70.5    67.9
2017-01-01 00:15:00    71.1    67.5    70.3    68.0    68.5    66.7  ...    70.4    68.7    70.2    68.4    70.8    67.6
2017-01-01 00:20:00    71.7    67.8    70.2    68.1    68.4    66.9  ...    69.6    69.1    70.0    68.4    71.0    67.9

列是时间，间隔为5min。行是sensor编号，提供文件表示sensor的经纬度。值是速度。

用sensor之间的距离矩阵代表路网（adjacency matrix、权重矩阵、代表节点的相似度）



## Los-loop

（这个就是METR-LA）



## SZ-Taxi

DataFrame二维表的格式

列是时间，间隔为15min。行是sensor编号。值是速度。

提供adjacency matrix描述路网的结构（1或0，邻接与否）



## Loop Seattle

`df = pd.read_pickle('speed_matrix_2015')`

DataFrame二维表的格式

ID                   d005es15036  d005es15125  d005es15214  ...  i520es00861  i520es00935  i520es00972
stamp                                                       ...
2015-01-01 00:00:00    61.939138    64.280883    62.077397  ...    68.112571    66.567829    62.032062
2015-01-01 00:05:00    59.232527    65.082450    64.808345  ...    59.022999    58.949034    61.212069
2015-01-01 00:10:00    61.991801    65.309123    64.803916  ...    58.710086    56.671427    57.488732
2015-01-01 00:15:00    62.480655    65.191651    67.206597  ...    64.368119    57.892398    64.087189
2015-01-01 00:20:00    62.490484    65.287669    67.323285  ...    62.795588    62.545365    64.567285

列是时间，间隔为5min。行是sensor编号。值是速度。

提供adjacency matrix描述路网的结构（1或0，邻接与否）



## NYC Speed data

按照道路ID组织数据，每一条数据包括道路ID、速度、时间、穿过道路的平均用时。

对于每个道路，提供文件描述一系列道路上sensor的经纬度位置、道路名称等。

Sequence of Lat/ Long points, describes locations of the sensor links



## HK

按照道路ID组织数据，每一条数据包括道路ID、道路区域、道路类型、道路状况等级、速度、时间。

时间间隔较短，可以得到每条道路，各个时间的速度信息。

对于每个路段link，提供文件描述起始站、终点站、以及相应的经纬度、道路类型。(基于它们可以构建路网的拓扑)



## Q-Traffic

- query sub-dataset

每条数据包括起始时间、起点经纬度、终点经纬度、预计的旅行时间

- traffic speed sub-dataset

数据收集的间隔为15min，每条数据为路段ID，时间戳 ([0, 5856))，速度(km/h)。

- road network sub-dataset

对于每个路段link，提供路段的起点（节点）和终点（节点），基于它们可以构建路网的拓扑、提供宽度，长度km，方向，限速和车道数信息。提供一个经纬度，不知道是起点还是终点。



## ENG-HW

每个站点不同时间的流量数据



## PEMS

## PeMSD3

DataFrame二维表的格式

列是时间，间隔为5min。行是sensor编号。值是flow。

也提供的numpy三维张量，时间间隔5min，三维（时间戳，sensor编号，flow）

用sensor之间的距离矩阵代表路网（adjacency matrix）



## PeMSD4

提供的numpy三维张量，时间间隔5min，三维（时间戳，sensor编号，（flow, occupy, speed））

用sensor之间的距离矩阵代表路网（adjacency matrix）



## PEMSD7

提供的numpy三维张量，时间间隔5min，三维（时间戳，sensor编号，flow）

用sensor之间的距离矩阵代表路网（adjacency matrix）



## PeMSD8

提供的numpy三维张量，时间间隔5min，三维（时间戳，sensor编号，（flow, occupy, speed））

用sensor之间的距离矩阵代表路网（adjacency matrix）



## PEMSD7(M){#index}

DataFrame二维表的格式

列是时间，间隔为5min。行是sensor编号。值是速度。

用sensor之间的距离矩阵代表路网（adjacency matrix）



## PeMSD-SF

Occupancy



## PEMS-BAY

DataFrame二维表的格式

​                                       773869     767541     767542     717447  ...     717595     772168     718141  769373

2012-03-01 00:00:00  64.375000  67.625000  67.125000  61.500000  ...  69.000000  59.250000  69.000000  61.875
2012-03-01 00:05:00  62.666667  68.555556  65.444444  62.444444  ...  64.444444  55.888889  68.444444  62.875
2012-03-01 00:10:00  64.000000  63.750000  60.000000  59.000000  ...  65.625000  61.375000  69.857143  62.000
2012-03-01 00:15:00   0.000000   0.000000   0.000000   0.000000  ...   0.000000   0.000000   0.000000   0.000
2012-03-01 00:20:00   0.000000   0.000000   0.000000   0.000000  ...   0.000000   0.000000   0.000000   0.000

列是时间，间隔为5min。行是sensor编号，提供文件表示sensor的经纬度。值是速度。

用sensor之间的距离矩阵代表路网（adjacency matrix、权重矩阵、代表节点的相似度）



## BusCHI

交通拥堵状况数据集



## NYC Accident data

发生碰撞的日期、时间、经纬度、街道名、受伤人数、死亡人数、原因、车辆类型等



## Road network data (OpenStreetMap)

https://www.openstreetmap.org/



## Weather and events data

https://www.wunderground.com/



## External data

常见的外部数据项。

- 气象条件：温度、湿度、风速、能见度和天气状态（晴/雨/风/多云等）
- 驾驶员ID：由于驾驶员的个人情况不同，预测会有一定的影响，因此有必要对驾驶员进行标记，此信息主要用于个人预测。
- 活动：包括各种节假日、交通管制、交通事故、体育赛事、音乐会等活动。
- 时间信息：星期几，一天中的时间片。
